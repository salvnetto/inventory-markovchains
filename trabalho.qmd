---
title: "Estoques"
subtitle: "Controle de Estoques Utilizando Cadeias de Markov"
author:
  - Salvador Netto (2022040141)
  - Nicolas Monteiro (2022039950)
  - Gustavo Aledi (2022040290)
abstract: ""
lang: pt
format: 
  pdf:
    toc: true
    fig-pos: "H"
    #toc-title: "Summary"
    toc-depth: 3
    #toc-location: right
    number-sections: true
    number-depth: 3
    documentclass: article
    fig-cap-location: top
    geometry:
      - top=3cm
      - left=3cm
      - right=2cm
      - bottom=2cm
execute:
  echo: false
  warning: false
  output: false
---

```{r}
library(tidyverse)
library(markovchain)
library(igraph)
library(kableExtra)
```

# Introdução

A gestão eficiente de estoque é um componente vital para o funcionamento bem-sucedido de qualquer negócio que lida com produtos tangíveis. A otimização dos níveis de estoque é crucial para garantir a disponibilidade de produtos para os clientes, ao mesmo tempo em que minimiza os custos de armazenamento e reposição.

Neste contexto, os modelos de Cadeias de Markov têm sido amplamente aplicados na previsão e gestão de estoques, oferecendo uma abordagem analítica poderosa para entender as mudanças no nível de estoque ao longo do tempo. Esses modelos, baseados na teoria das probabilidades e processos estocásticos, permitem prever o comportamento futuro do estoque, considerando as transições probabilísticas entre diferentes estados.

O **método s e S**, dentro do contexto das Cadeias de Markov, é uma estratégia popular para determinar os pontos de reabastecimento ideal. Ele consiste em estabelecer dois pontos de controle: o nível mínimo no estoque (s) e o nível máximo de estoque (S). Quando o estoque atinge o nível mínimo ou abaixo dele, uma nova encomenda é feita para reabastecer o estoque até o nível máximo estabelecido.

O principal objetivo deste trabalho é explorar e aplicar o modelo de Cadeias de Markov em conjunto com o método s e S para a gestão de estoque. Este estudo buscará analisar como esses modelos podem ser utilizados para otimizar os níveis de estoque, minimizando os custos associados à manutenção de inventário sem comprometer a disponibilidade dos produtos para os clientes.

Serão examinados os conceitos fundamentais das Cadeias de Markov, a aplicação do método s e S na gestão de estoque e como essas ferramentas analíticas podem ser empregadas na tomada de decisões estratégicas relacionadas à reposição de estoque. Além disso, serão discutidos casos práticos e exemplos para ilustrar a aplicação desses modelos em cenários do mundo real.

Por meio dessa pesquisa, busca-se fornecer insights valiosos sobre como os modelos de Cadeias de Markov e o método s e S podem ser implementados para melhorar a eficiência na gestão de estoques, contribuindo assim para o aprimoramento das práticas comerciais e a maximização dos resultados empresariais.

Neste trabalho estamos simulando um caso bem simples de estoque de lojas aplicado. Com isso em mente, vamos supor que estamos pegando dados de uma loja que vende celulares na gutierez, nosso produto em questão é o novo iphone, iphone 13.

# Aplicação

![Exemplo](img/graph1.png)

- $Z_n$ é a demanda no n-ésimo dia
- $s$ é o nível mínimo do estoque
- $S$ o nível máximo do estoque
- $X_n$ é a quantidade no estoque depois de satisfazer a demanda e antes de utilizar a estratégia

Se, após satisfazer a demanda $Z_n$, o estoque atinge o nível (inferior) $s$ então é feita a reposição do estoque
até o nível (superior) $S$. Se o estoque não atinge o nível inferior $s$ então não é feita a reposição.

$$X_{n+1}= \begin{cases} X_n - Z_{n+1}, & s<X_n<S. \\ S - Z_{n+1}, & X_n \leq s. \end{cases}$$

```{r}
data = read.csv("datasets/data.csv") %>% select(-X)
data$X.1 = 0
colnames(data) = c(-1:5)
rownames(data) = c(-1:5)

trans_matrix = as.matrix(data)
estados = as.character(c(-1:5))
```

```{r}
cadeia = new("markovchain", states= estados, transitionMatrix= trans_matrix, name= 'Estoque')
```

```{r}
trans_matrix2 = trans_matrix[-1,-1]
cadeia2 = new("markovchain", states= as.character(c(0:5)), transitionMatrix= trans_matrix2, name= 'Estoque')
```

# Matriz e Topologia do Processo

$$\begin{array}{c|ccccccc}
      & -1 & 0 & 1 & 2 & 3 & 4 & 5 \\
\hline
-1  & 0.0 & 0.0 & 0.0 & 0.1 & 0.2 & 0.4 & 0.3 \\
0   & 0.0 & 0.0 & 0.0 & 0.1 & 0.2 & 0.4 & 0.3 \\
1   & 0.0 & 0.0 & 0.0 & 0.1 & 0.2 & 0.4 & 0.3 \\
2   & 0.0 & 0.0 & 0.0 & 0.1 & 0.2 & 0.4 & 0.3 \\
3   & 0.0 & 0.1 & 0.2 & 0.4 & 0.3 & 0.0 & 0.0 \\
4   & 0.0 & 0.0 & 0.1 & 0.2 & 0.4 & 0.3 & 0.0 \\
5   & 0.0 & 0.0 & 0.0 & 0.1 & 0.2 & 0.4 & 0.3 \\
\end{array}$$


```{r}
#| output: true
#| fig-cap: "Topologia da Cadeia"

par(oma=c(0,0,0,0))
par(mar=c(0,0,0,0))

plot(cadeia,
    #layout=layout.auto,
    edge.label.cex = 0.7,
    edge.arrow.size=.4, edge.curved=.2,
    vertex.color="orange", 
    vertex.frame.color="#555555",
    vertex.label.color="black",
    vertex.label.cex=.9)
    #frame= TRUE,
```

Podemos observar através da topologia da cadeia em que não temos estados absorventes, ou seja, não há nenhum estado em que após chegar nele nunca mais sai, e isso faz sentido pois no nosso problema estamos lidando com estoques de loja, em nenhum momento o estoque de determinado produto vai ficar naquela mesma quantidade para sempre, pois temos as demandas, etc. Conseguimos ver também que temos uma classe não essencial que é referente ao estado $-1$ da cadeia, isso se deve ao fato de que ao atingirmos o limite inferior do estoque (definido como $s = 2$), nós repomos esse estoque até seu valor máximo (definido como $S = 5$), então a partir do momento em que chegamos numa quantidade de estoque inferior a "$s$" repomos ele até "$S$". Os outros estados que estão abaixo do limite inferior ou o próprio não são considerados não essenciais pois, a nossa variável $Z_n$ (a demanda do n-ésimo dia) foi definida como tendo as seguintes probabilidades:

$P(Z_1 = 0) = 0.3$

$P(Z_1 = 1) = 0.4$

$P(Z_1 = 2) = 0.2$

$P(Z_1 = 3) = 0.1$

Visto isso, conseguimos observar que podemos ter $3, 2, 1$ vendas no dia e através da nossa matriz de transição os outros estados abaixo ou igual ao limite inferior são alcançados.

# Classes

```{r}
#| output: true
#| echo: true
is.irreducible(cadeia)
```

Através do comando **is.irreducible()** podemos observar que a cadeia não é irredutível com a saída sendo "FALSE", isso se deve ao fato de como vimos anteriormente na topologia da cadeia, em que nem todos os estados se comunicam ente si, portanto a cadeia não é irredutível, ela será se pegarmos uma classe apenas das essenciais. A vantagem de acharmos uma classe irredutível é por que com ela conseguimos achar a distribuição invariante, e conseguimos fazer previsões de estoque e demandas para n dias, conforme os dias vão passando a probabilidade da cadeia vai se tornando muito parecida com o próximo dia e se for aumentando os dias com $n \to \infty$ a diferença das probabilidades de transição estará na décima, vigésima... casa decimal.    

```{r}
#| output: true
#| echo: true
communicatingClasses(cadeia)
```

Como falado anteriormente, nem todos os estados se comunicam entre si e através do comando **communicationClasses()**, podemos notar que o estado $-1$ é o único que não se comunica com os demais. A comunicação entre os estados não precisa ser direta para haver comunicação, existe uma propriedade que diz que um estado $i$ que se comunica com um estado $j$, e esse estado $j$ se comunica com um estado $k$, o estado $i$ se comunica com $k$, se $i \to j, j \to k$ então $i \to k$.

# Distribuição Invariante

```{r}
#| output: true
#| echo: true
steadyStates(cadeia)
```

Com o comando **steadyStates()** conseguimos obter a distribuição invariante, nessa função já é pegada apenas as classes essenciais para realizar esse cálculo. A seguir, mostraremos que ao decorrer do dias a matriz de transição vai se tornando cada vez mais próxima da distribuição invariante. Realizaremos para $n$ (número de dias) igual a $2, 4, 6, 8$ e $10$.

```{r}
#| output: true
#| echo: true


n2 = trans_matrix %*% trans_matrix 
n4 = trans_matrix %*% trans_matrix %*% trans_matrix %*% trans_matrix
n6 = trans_matrix %*% trans_matrix %*% trans_matrix %*% trans_matrix  %*% trans_matrix %*% trans_matrix 
n10 = trans_matrix %*% trans_matrix %*% trans_matrix %*% trans_matrix  %*% trans_matrix %*% trans_matrix %*% trans_matrix %*% trans_matrix %*% trans_matrix %*% trans_matrix

n2
n4
n6
n10

```

Observando as saídas, podemos notar que a partir do sexto dia a matriz de transição já se torna extremamente semelhante aos valores da distribuição invariante.

# Tempo de recorrência e Período

```{r}
#| output: true
#| echo: true
meanRecurrenceTime(cadeia)
```

Através do comando **meanRecurrenceTime()**, ela nos retorna o número esperado de etapas necessárias para que o processo retorne a um determinado estado, começando desse estado. Isso é conhecido como "tempo de recorrência". Formalmente, a fórmula para o Tempo de Recorrência Médio é dado por: $M_i = \frac{1}{\pi_i}$, onde $\pi_i$ é a distribuição invariante. Pela saída dessa função, podemos observar novamente em que o estado -1 não tem um tempo médio de retorno para ele pois como já foi dito antes é uma classe não essencial, sendo mais uma forma de validar tudo que já foi dito anteriormente. O estado 3 retorna para ele em média 3,57 passos e é o estado que retorna mais rápido de nossa cadeia, isso faz sentido pois conforme vimos nos resultados da distribuição invariante $P_{ii} = 0.2803738$ com $i = 3$, ou seja, e o estado com a probabilidade de retorno mais alta da cadeia, e consequentemente em média retorna mais rápido também.


```{r}
#| output: true
#| echo: true


period(cadeia)
period(cadeia2)

```

Observando o período da cadeia com a classe não essencial através do comando **period()** ele nós retorna o valor $0$, isso se deve ao fato de que como existe uma classe não essencial e por isso a cadeia é não irredutível não existe probabilidade de retorno do estado $-1$ pra ele mesmo,por isso o período é $0$.
Agora quando nós retiramos a classe não essencial da cadeia e ficamos apenas com as essenciais temos que o período da cadeia é $1$, isso se deve ao fato de que $d_i = mdc(n \geq p_{ii} > 0)$, o mínimo divisor comum de $1,2,3...$
é $1$, logo, o período da cadeia é $1$ podemos ver isso para as matrizes de ordem superior $2$ e $3$ abaixo:


```{r}
#| output: true
#| echo: true

n2 = trans_matrix2 %*% trans_matrix2 
n3 = trans_matrix2 %*% trans_matrix2 %*% trans_matrix2

n2
n3
```

# Simulação

```{r}
#| output: true
#| echo: true

previsao = markovchainSequence(n = 100, markovchain = cadeia, t0 = "-1")
previsao

```

Por meio do comando **markovchainSequence()**, nós conseguimos fazer previsões de qual a quantidade de estoques que nos temos em $n$ passos, no nosso caso quisemos ver qual a quantidade de produtos que teremos em $100$ dias começando com o estoque negativo, ao final de $100$ dias nos estamos com $2$ produtos no estoque. 

```{r}
#| output: true
#| tbl-cap: "Frequência"
tabela = table(previsao)
df2 = as.data.frame(tabela)
kable(df2, booktabs = T, linesep = "") %>% 
  kable_styling(latex_options = c("stripped", "HOLD_position")) %>% 
  row_spec(0, bold = T) %>% 
  row_spec(1, background  = "lightgray") %>% 
  row_spec(3, background  = "lightgray") %>% 
  row_spec(5, background  = "lightgray")
```

Essa tabela mostra a frequência com que cada quantidade de produtos no estoque nos tivemos ao decorrer dos $100$ dias, e podemos ver que as quantidades mais frequentes são $2, 3$ e $4$. 

# Conclusão


